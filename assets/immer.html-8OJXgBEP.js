import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c as e,b as n,d as s,e as c,a as l}from"./app-cbOojWoE.js";const r={},i=n("h1",{id:"immer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#immer","aria-hidden":"true"},"#"),s(" immer")],-1),u=n("h2",{id:"网址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#网址","aria-hidden":"true"},"#"),s(" 网址")],-1),k={href:"https://immerjs.github.io/immer/zh-CN/",target:"_blank",rel:"noopener noreferrer"},d=l(`<h2 id="实现useimmer-hook" tabindex="-1"><a class="header-anchor" href="#实现useimmer-hook" aria-hidden="true">#</a> 实现useImmer hook</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> produce<span class="token punctuation">,</span> Draft<span class="token punctuation">,</span> freeze <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;immer&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">DraftFunction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>draft<span class="token operator">:</span> Draft<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Updater<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">S</span> <span class="token operator">|</span> DraftFunction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ImmerHook<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Updater<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useImmer</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>initialValue<span class="token operator">:</span> <span class="token constant">S</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> ImmerHook<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useImmer</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>initialValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span> updateValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token function">freeze</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> initialValue <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> initialValue<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span>
        val<span class="token punctuation">,</span>
        <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>updater<span class="token operator">:</span> Updater<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> updater <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">updateValue</span><span class="token punctuation">(</span><span class="token function">produce</span><span class="token punctuation">(</span>updater<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">updateValue</span><span class="token punctuation">(</span><span class="token function">freeze</span><span class="token punctuation">(</span>updater<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>immer可以阻止无意义的渲染。</p>`,3);function m(v,f){const a=p("ExternalLinkIcon");return o(),e("div",null,[i,u,n("p",null,[n("a",k,[s("immer"),c(a)])]),d])}const g=t(r,[["render",m],["__file","immer.html.vue"]]);export{g as default};
